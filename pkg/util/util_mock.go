// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/util/util.go

// Package util is a generated GoMock package.
package util

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEXEC is a mock of EXEC interface.
type MockEXEC struct {
	ctrl     *gomock.Controller
	recorder *MockEXECMockRecorder
}

// MockEXECMockRecorder is the mock recorder for MockEXEC.
type MockEXECMockRecorder struct {
	mock *MockEXEC
}

// NewMockEXEC creates a new mock instance.
func NewMockEXEC(ctrl *gomock.Controller) *MockEXEC {
	mock := &MockEXEC{ctrl: ctrl}
	mock.recorder = &MockEXECMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEXEC) EXPECT() *MockEXECMockRecorder {
	return m.recorder
}

// RunCommand mocks base method.
func (m *MockEXEC) RunCommand(arg0 string, arg1 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockEXECMockRecorder) RunCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockEXEC)(nil).RunCommand), arg0, arg1)
}
